/*
Copyright 2021 The Kruise Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/openkruise/kruise/apis/ctrlmesh/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VirtualOperatorLister helps list VirtualOperators.
type VirtualOperatorLister interface {
	// List lists all VirtualOperators in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.VirtualOperator, err error)
	// VirtualOperators returns an object that can list and get VirtualOperators.
	VirtualOperators(namespace string) VirtualOperatorNamespaceLister
	VirtualOperatorListerExpansion
}

// virtualOperatorLister implements the VirtualOperatorLister interface.
type virtualOperatorLister struct {
	indexer cache.Indexer
}

// NewVirtualOperatorLister returns a new VirtualOperatorLister.
func NewVirtualOperatorLister(indexer cache.Indexer) VirtualOperatorLister {
	return &virtualOperatorLister{indexer: indexer}
}

// List lists all VirtualOperators in the indexer.
func (s *virtualOperatorLister) List(selector labels.Selector) (ret []*v1alpha1.VirtualOperator, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VirtualOperator))
	})
	return ret, err
}

// VirtualOperators returns an object that can list and get VirtualOperators.
func (s *virtualOperatorLister) VirtualOperators(namespace string) VirtualOperatorNamespaceLister {
	return virtualOperatorNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VirtualOperatorNamespaceLister helps list and get VirtualOperators.
type VirtualOperatorNamespaceLister interface {
	// List lists all VirtualOperators in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.VirtualOperator, err error)
	// Get retrieves the VirtualOperator from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.VirtualOperator, error)
	VirtualOperatorNamespaceListerExpansion
}

// virtualOperatorNamespaceLister implements the VirtualOperatorNamespaceLister
// interface.
type virtualOperatorNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VirtualOperators in the indexer for a given namespace.
func (s virtualOperatorNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VirtualOperator, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VirtualOperator))
	})
	return ret, err
}

// Get retrieves the VirtualOperator from the indexer for a given namespace and name.
func (s virtualOperatorNamespaceLister) Get(name string) (*v1alpha1.VirtualOperator, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("virtualoperator"), name)
	}
	return obj.(*v1alpha1.VirtualOperator), nil
}
